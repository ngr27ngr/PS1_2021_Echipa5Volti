#include<LiquidCrystal.h>
const int rs=12,en=11,d4=5,d5=4,d6=3,d7=2;
LiquidCrystal lcd(rs,en,d4,d5,d6,d7);

int val;
float voltage;
float temp;
int seconds=58;
int minutes=59;
int hours=23;

void _ADC_CONFIG()
{
  ADCSRA |= 1 << ADEN; // Alimentarea perifericului.
  ADCSRA |= 1 << ADIE; // Pornim intreruperile ADC.
  ADMUX |= 1 << REFS0; // Setam ca referinta 5V.

  ADCSRA |= 1 << ADSC; // Pornim prima conversie.  
}

void _ADC_CONVERT()
{
    lcd.setCursor(0,0);
  
    val = ADC;
    ADCSRA |= 1 << ADSC;
   
    temp=int(100*(val*((float)5/1023))-50);
  
    lcd.print("Temp=");
    lcd.print(temp);
     
}


void _INIT_TIMER()
{
    //sterg reg de control
    TCCR1A = 0;
    TCCR1B = 0;
    TCCR1C = 0;
    //mod de lucru CTC
    TCCR1B |= 1 << WGM12;
    //setare prescaler(1024)
    TCCR1B |= 1 << CS12 | 1 << CS10;
    //valoare pentru intrerupere la o secunda
    OCR1A = 15625;
    //intrerupere de comp
    TIMSK1 |= 1 << OCIE1A;

}
void _UPDATE_TIME_ON_LCD(int seconds, int minutes, int hours)
{

  if(minutes==0 && seconds <= 9)
    { 
      lcd.setCursor(0, 1);
      lcd.print("Ora:");
      lcd.print("00:00:0");
      lcd.print(seconds);
    }

     if(minutes == 0 && seconds >= 10)
    {   
        lcd.setCursor(0, 1);
        lcd.print("Ora:");
        lcd.setCursor(4, 1);
        lcd.print("00:00:");
        lcd.setCursor(10, 1);
        lcd.print(seconds);
    }


    if(minutes > 0 && minutes <=9 && seconds<=9)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("00:0");
    lcd.setCursor(8, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":0");
    lcd.setCursor(11, 1);
    lcd.print(seconds);

  }

  if(minutes > 0 && minutes <=9 && seconds>=10)
  { 
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("00:0");
    lcd.setCursor(8, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":");
    lcd.setCursor(10, 1);
    lcd.print(seconds);

  }

  if(minutes>=10 && seconds<=9)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("00:");
    lcd.setCursor(7, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":0");
    lcd.setCursor(11, 1);
    lcd.print(seconds);

  }

  if(minutes>=10 && seconds>=10)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("00:");
    lcd.setCursor(7, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":");
    lcd.setCursor(10, 1);
    lcd.print(seconds);

  }
  
  
  if(hours> 0 && minutes<=9 && seconds<=9)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("0");
    lcd.setCursor(5, 1);
    lcd.print(hours);
    lcd.setCursor(6, 1);
    lcd.print(":");
    lcd.setCursor(7, 1);
    lcd.print("0");
    lcd.setCursor(8, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":0");
    lcd.setCursor(11, 1);
    lcd.print(seconds);

  }
  
  if(hours> 0 && minutes<=9 && seconds>=10)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("0");
    lcd.setCursor(5, 1);
    lcd.print(hours);
    lcd.setCursor(6, 1);
    lcd.print(":0");
    lcd.setCursor(8, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":");
    lcd.setCursor(10, 1);
    lcd.print(seconds);

  }
  
  if(hours> 0 && minutes>=10 && seconds<=9)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("0");
    lcd.setCursor(5, 1);
    lcd.print(hours);
    lcd.setCursor(7, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":0");
    lcd.setCursor(11, 1);
    lcd.print(seconds);

  }
  
  if(hours> 0 && minutes>=10 && seconds>=10)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print("0");
    lcd.setCursor(5, 1);
    lcd.print(hours);
    lcd.setCursor(7, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":");
    lcd.setCursor(10, 1);
    lcd.print(seconds);

  }
  
  if(hours>= 10 && minutes<=9 && seconds<=9)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print(hours);
    lcd.setCursor(6, 1);
    lcd.print(":0");
    lcd.setCursor(8, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":0");
    lcd.setCursor(11, 1);
    lcd.print(seconds);

  }
  
  if(hours>= 10 && minutes<=9 && seconds>=10)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print(hours);
    lcd.setCursor(6, 1);
    lcd.print(":0");
    lcd.setCursor(8, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":");
    lcd.setCursor(10, 1);
    lcd.print(seconds);

  }
  
  if(hours>= 10 && minutes>=10 && seconds<=9)
  {
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print(hours);
    lcd.setCursor(6, 1);
    lcd.print(":");
    lcd.setCursor(7, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":0");
    lcd.setCursor(11, 1);
    lcd.print(seconds);

  }
  
  if(hours>= 10 && minutes>=10 && seconds>=10)
  { 
    lcd.setCursor(0, 1);
    lcd.print("Ora:");
    lcd.setCursor(4, 1);
    lcd.print(hours);
    lcd.setCursor(6, 1);
    lcd.print(":");
    lcd.setCursor(7, 1);
    lcd.print(minutes);
    lcd.setCursor(9, 1);
    lcd.print(":");
    lcd.setCursor(10, 1);
    lcd.print(seconds);

  }
  
  
}
ISR(TIMER1_COMPA_vect)
{


    seconds++;

    if(seconds >= 60)
    {
        seconds=0;
        minutes++;
    }

    if(minutes >=60)
    {
      minutes=0;
      hours++;
    }

    if(hours==24)
    {
      hours=0;
    }

  _UPDATE_TIME_ON_LCD(seconds, minutes, hours);

}

ISR(ADC_vect)
{
   _ADC_CONVERT();
}

int main()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  _ADC_CONFIG();
  _INIT_TIMER();
  
  sei();
  
  while(1)
  {
  }
  
  return 0;
}

